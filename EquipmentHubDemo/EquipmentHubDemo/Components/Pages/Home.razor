@page "/"
@using Microsoft.AspNetCore.Components.Web
@implements IAsyncDisposable
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@namespace EquipmentHubDemo.Components.Pages

@inject HttpClient Http
@inject NavigationManager Nav

<h3>Live Measurements</h3>
<p class="text-muted">Agent → Broker → Filter/Store → Live cache → (WASM UI)</p>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}

<select value="@selectedKey" @onchange="OnSelectedChanged" class="form-select form-select-sm" style="max-width:460px;">
    @foreach (var k in keys)
    {
        <option value="@k">@k</option>
    }
</select>

<button class="btn btn-sm btn-primary ms-2" @onclick="ToggleAsync">@((running ? "Pause" : "Run"))</button>

<div class="d-flex flex-wrap align-items-center gap-3 mt-2">
    <span class="badge bg-primary text-wrap">Measurements received: @_totalReceived</span>
    <span class="text-muted small">Active buffer: @_points.Count</span>
</div>

<ChartIsland Points="_points"
             Title="selectedKey" />

@code {
    private string? error;

    private List<string> keys = new();
    private string? selectedKey;
    private bool running = true;

    private CancellationTokenSource? _cts;
    private Task? _pollingTask;

    private List<PointDto> _points = new();
    private long _totalReceived;
    private long _sinceTicks;

    private string Api(string relative) => Nav.ToAbsoluteUri(relative).ToString();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            keys = await Http.GetFromJsonAsync<List<string>>(Api("/api/keys")) ?? new();
            if (keys.Count == 0)
            {
                error = "No keys yet. Is the Agent running and the broker/worker receiving data?";
                return;
            }

            selectedKey = keys[0];
            if (running)
            {
                await StartPollingAsync();
            }
        }
        catch (Exception ex)
        {
            error = "Init failed: " + ex.Message;
        }
    }

    private async Task ToggleAsync()
    {
        running = !running;
        if (running)
        {
            await StartPollingAsync();
        }
        else
        {
            await StopPollingAsync();
        }
    }

    private async Task StartPollingAsync()
    {
        var key = selectedKey;
        if (string.IsNullOrWhiteSpace(key))
        {
            return;
        }

        await StopPollingAsync();

        _points = new List<PointDto>();
        _sinceTicks = 0;
        _totalReceived = 0;

        _cts = new CancellationTokenSource();
        _pollingTask = PollLoopAsync(key, _cts.Token);
        await InvokeAsync(StateHasChanged);
    }

    private async Task StopPollingAsync()
    {
        if (_cts is null)
        {
            return;
        }

        _cts.Cancel();
        var toAwait = _pollingTask;
        _pollingTask = null;

        _cts.Dispose();
        _cts = null;

        if (toAwait is not null)
        {
            try
            {
                await toAwait;
            }
            catch (OperationCanceledException)
            {
                // expected when stopping
            }
        }
    }

    private async Task PollLoopAsync(string key, CancellationToken ct)
    {
        try
        {
            using var timer = new PeriodicTimer(TimeSpan.FromMilliseconds(250));
            while (await timer.WaitForNextTickAsync(ct))
            {
                if (!running)
                {
                    continue;
                }

                try
                {
                    var url = Api($"/api/live?key={Uri.EscapeDataString(key)}&sinceTicks={_sinceTicks}");
                    var batch = await Http.GetFromJsonAsync<List<PointDto>>(url, new System.Text.Json.JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                    if (batch is null || batch.Count == 0)
                    {
                        continue;
                    }

                    var newPoints = 0;
                    foreach (var p in batch)
                    {
                        _points.Add(p);
                        _sinceTicks = Math.Max(_sinceTicks, p.X.Ticks);
                        newPoints++;
                    }

                    const int max = 2000;
                    if (_points.Count > max)
                    {
                        var excess = _points.Count - max;
                        _points.RemoveRange(0, excess);
                    }

                    if (newPoints > 0)
                    {
                        _totalReceived += newPoints;
                        await InvokeAsync(StateHasChanged);
                    }
                }
                catch (OperationCanceledException)
                {
                    break;
                }
                catch (Exception ex)
                {
                    error ??= "Polling error: " + ex.Message;
                }
            }
        }
        catch (OperationCanceledException)
        {
            // loop cancelled -> exit silently
        }
    }

    private async Task OnSelectedChanged(ChangeEventArgs e)
    {
        selectedKey = e.Value?.ToString();
        if (running)
        {
            await StartPollingAsync();
        }
        else
        {
            _points = new List<PointDto>();
            _sinceTicks = 0;
            _totalReceived = 0;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await StopPollingAsync();
    }
}
